package Tile
import GameConstants
import Area
import LinkedList

public tuple key(int x, int y)

public enum Side
	TOP
	RIGHT
	BOTTOM
	LEFT	

public class Tile
	Area area
	vec2 pos
	key ipos
	int ttypeId = UNWALKABLE_ID
	
	construct(Area area, int x, int y)
		this.area = area
		this.ipos = key(x,y)
		this.pos = vec2(area.zero.x + 128 * x, area.zero.y + 128 * y)		
		area.tileTable.saveInt(x, y, this castTo int)
	
		
	static function getFromPos(vec2 pos) returns Tile
		let area = getAreaFromPoint(pos)
		return area.tileTable.loadInt((pos.x-area.zero.x).toInt() div 128, (pos.y-area.zero.y).toInt() div 128) castTo Tile
		
	
	
	function changeTType(int ttype)
		SetTerrainType(pos.x, pos.y, ttype, -1, 1, 0)
		
	function getRandomWalkableNeighbour() returns Tile
		LinkedList<Tile> tiles = new LinkedList<Tile>()
		Tile val = null
		for i = -10 to 10
			for j = -10 to 10
				let t = area.tileTable.loadInt(ipos.x+i, ipos.y+j) castTo Tile
				if t != null and t.ttypeId == WALKABLE_ID
					tiles.add(t)
		if tiles.getSize() < 1
			print("no nearby tile walkable")
		else
			val = tiles.get(GetRandomInt(0, tiles.getSize()-1))
			print("found Tile")
		destroy tiles
		return val
	
	function getNeighbour(Side side) returns Tile
		switch side
			case TOP
				return area.tileTable.loadInt(ipos.x, ipos.y+1) castTo Tile
			case RIGHT
				return area.tileTable.loadInt(ipos.x+1, ipos.y) castTo Tile
			case BOTTOM
				return area.tileTable.loadInt(ipos.x, ipos.y-1) castTo Tile
			case LEFT
				return area.tileTable.loadInt(ipos.x-1, ipos.y) castTo Tile
			default
				error("Invalid Type")
				return null
		

	
		
		
		